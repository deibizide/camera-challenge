{"version":3,"sources":["hooks/useCamera.tsx","components/TakePicture/TakePicture.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useCamera","parameters","useState","imageSrc","setImageSrc","isStreaming","setisStreaming","video","videoRef","canvas","canvasRef","HEIGHT","constraints","width","min","ideal","max","height","useEffect","navigator","mediaDevices","console","log","getUserMedia","then","stream","current","srcObject","play","catch","err","addEventListener","videoHeight","videoWidth","getPicture","getContext","drawImage","src","toDataURL","TakePicture","useRef","Container","className","ref","default","kind","srcLang","Row","Col","Button","variant","onClick","icon","faCamera","size","faRandom","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8UAoEeA,EA7DG,SAACC,GAA0E,IAAD,EACxDC,mBAAS,IAD+C,mBACjFC,EADiF,KACvEC,EADuE,OAElDF,oBAAS,GAFyC,mBAEjFG,EAFiF,KAEpEC,EAFoE,KAGlFC,EAAQN,EAAWO,SACnBC,EAASR,EAAWS,UAEtBC,EAAS,EAEPC,EAAc,CAChBL,MAAO,CACHM,MAAO,CACHC,IAAK,KACLC,MAAO,KACPC,IAAK,MAETC,OAAQ,CACJH,IAAK,IACLC,MAAO,KACPC,IAAK,QAwCjB,OALAE,qBAAU,WA7BDC,WAAcA,UAAUC,cACzBC,QAAQC,IAAI,+CAEhBH,UAAUC,aACLG,aAAaX,GACbY,MAAK,SAAAC,GACFlB,EAAMmB,QAAQC,UAAYF,EAC1BlB,EAAMmB,QAAQE,UAEjBC,OAAM,SAAAC,GACHT,QAAQC,IAAR,6BAAkCQ,OAG1CvB,EAAMmB,QAAQK,iBAAiB,WAAW,WACjC1B,IACDM,EAASJ,EAAMmB,QAAQM,aAAezB,EAAMmB,QAAQO,WAlClD,KAmCF3B,GAAe,SAgBxB,IAEI,CAAE4B,WAbU,WACCzB,EAAOiB,QAAQS,WAAW,MAClCC,UAAU7B,EAAMmB,QAAS,EAAG,EA1C1B,IA0CoCf,GAC9C,IAAM0B,EAAM5B,EAAOiB,QAAQY,UAAU,aAErClC,EAAYiC,IAQKlC,aCtBVoC,G,MA9Be,WAC1B,IAAM7B,EAAY8B,iBAA0B,MACtChC,EAAWgC,iBAAyB,MAElCN,EAAelC,EAAU,CAAEU,YAAWF,aAAtC0B,WAER,OACI,kBAACO,EAAA,EAAD,CAAWC,UAAU,2BACjB,2BAAOC,IAAKnC,EAAUkC,UAAU,cAC5B,2BAAOE,SAAO,EAACC,KAAK,WAAWC,QAAQ,QAG3C,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKN,UAAU,oBACX,oEACA,kBAACO,EAAA,EAAD,CAAQC,QAAQ,OAAOR,UAAU,MAAMS,QAASjB,GAC5C,kBAAC,IAAD,CAAiBkB,KAAMC,IAAUC,KAAK,QAE1C,kBAACL,EAAA,EAAD,CAAQC,QAAQ,OAAOR,UAAU,qCAAqCS,QAASjB,GAC3E,4CACA,kBAAC,IAAD,CAAiBkB,KAAMG,IAAUD,KAAK,UAIlD,6CACA,4BAAQX,IAAKjC,OCpBV8C,EAXO,WAGlB,OACI,yBAAKd,UAAU,QACX,kBAAC,EAAD,QCAQe,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,MCVvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHpB,kBAAmB/C,WACnBA,UAAUgD,cAAcC,MACnB5C,MAAK,SAAA6C,GACFA,EAAaC,gBAEhBzC,OAAM,SAAA0C,GACHlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.cb3f1d95.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\ninterface Parameters {\n    canvasRef: any;\n    videoRef: any;\n}\n\nconst useCamera = (parameters: Parameters): { getPicture: () => void; imageSrc: string } => {\n    const [imageSrc, setImageSrc] = useState('');\n    const [isStreaming, setisStreaming] = useState(false);\n    const video = parameters.videoRef;\n    const canvas = parameters.canvasRef;\n    const WIDTH = 320;\n    let HEIGHT = 0;\n\n    const constraints = {\n        video: {\n            width: {\n                min: 1280,\n                ideal: 1920,\n                max: 2560,\n            },\n            height: {\n                min: 720,\n                ideal: 1080,\n                max: 1440,\n            },\n        },\n    };\n\n    const startCamera = (): void => {\n        if (!navigator || !navigator.mediaDevices) {\n            console.log('Camera API is not available in your browser');\n        }\n        navigator.mediaDevices\n            .getUserMedia(constraints)\n            .then(stream => {\n                video.current.srcObject = stream;\n                video.current.play();\n            })\n            .catch(err => {\n                console.log(`An error occurred: ${err}`);\n            });\n\n        video.current.addEventListener('canplay', () => {\n            if (!isStreaming) {\n                HEIGHT = video.current.videoHeight / (video.current.videoWidth / WIDTH);\n                setisStreaming(false);\n            }\n        });\n    };\n\n    const getPicture = (): void => {\n        const context = canvas.current.getContext('2d');\n        context.drawImage(video.current, 0, 0, WIDTH, HEIGHT);\n        const src = canvas.current.toDataURL('image/png');\n\n        setImageSrc(src);\n    };\n\n    useEffect(() => {\n        startCamera();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return { getPicture, imageSrc };\n};\n\nexport default useCamera;\n","import React, { useRef } from 'react';\n// bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n// font-awesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCamera, faRandom } from '@fortawesome/free-solid-svg-icons';\nimport useCamera from '../../hooks/useCamera';\n// style\nimport './style.scss';\n\nconst TakePicture: React.FC = () => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const videoRef = useRef<HTMLVideoElement>(null);\n\n    const { getPicture } = useCamera({ canvasRef, videoRef });\n\n    return (\n        <Container className=\"take-picture__container\">\n            <video ref={videoRef} className=\"w-100 mt-5\">\n                <track default kind=\"captions\" srcLang=\"en\" />\n            </video>\n\n            <Row>\n                <Col className=\"text-center mt-5\">\n                    <p>Press the button to preview the image</p>\n                    <Button variant=\"info\" className=\"btn\" onClick={getPicture}>\n                        <FontAwesomeIcon icon={faCamera} size=\"2x\" />\n                    </Button>\n                    <Button variant=\"info\" className=\"btn w-50 d-flex align-items-center\" onClick={getPicture}>\n                        <p>Change Camera</p>\n                        <FontAwesomeIcon icon={faRandom} size=\"1x\" />\n                    </Button>\n                </Col>\n            </Row>\n            <h5>Image Preview</h5>\n            <canvas ref={canvasRef} />\n        </Container>\n    );\n};\n\nexport default TakePicture;\n","// import React, { useState } from 'react';\nimport React from 'react';\n\nimport './App.css';\nimport TakePicture from './components/TakePicture/TakePicture';\n// import Home from './components/Home/Home';\n\nconst App: React.FC = () => {\n    // const [isUserReady, setIsUserReady] = useState(false);\n\n    return (\n        <div className=\"main\">\n            <TakePicture />\n            {/* {isUserReady ? <TakePicture /> : <Home setIsUserReady={setIsUserReady} isUserReady={isUserReady} />} */}\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}