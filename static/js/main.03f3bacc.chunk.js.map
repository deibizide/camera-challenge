{"version":3,"sources":["components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","useState","file","setFile","className","Button","variant","type","accept","id","onChange","e","URL","createObjectURL","target","files","getImagePreview","src","width","height","alt","App","isUserReady","setIsUserReady","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAgCeA,G,MAnBe,WAAM,MAERC,mBAAS,IAFD,mBAEzBC,EAFyB,KAEnBC,EAFmB,KAQhC,OACI,yBAAKC,UAAU,qEACX,wBAAIA,UAAU,oBAAd,kDACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,gBAAgBF,UAAU,wCACtC,2BAAOG,KAAK,OAAOC,OAAO,UAAUC,GAAG,OAAOC,SAAU,SAACC,GAAD,OAR5C,SAAAA,GACpBR,EAAQS,IAAIC,gBAAgBF,EAAEG,OAAOC,MAAM,KAOkCC,CAAgBL,OAEzF,yBAAKM,IAAKf,EAAMgB,MAAM,MAAMC,OAAO,MAAMC,IAAI,6BCR1CC,EAZO,WAAO,IAAD,EACcpB,oBAAS,GADvB,mBACjBqB,EADiB,KACJC,EADI,KAGxB,OACI,yBAAKnB,UAAU,QAGX,kBAAC,EAAD,CAAMmB,eAAgBA,EAAgBD,YAAaA,MCF3CE,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,MCVvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03f3bacc.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// bootstrap\nimport Button from 'react-bootstrap/Button';\n// hooks\n// import useImagePreview from '../../hooks/usePreviewImage';\n// style\nimport './style.scss';\n\ninterface Props {\n    isUserReady: boolean;\n    setIsUserReady: (isUserReady: boolean) => void;\n}\n\nconst Home: React.FC<Props> = () => {\n    // const { getPreview } = useImagePreview();\n    const [file, setFile] = useState('');\n\n    const getImagePreview = e => {\n        setFile(URL.createObjectURL(e.target.files[0]));\n    };\n\n    return (\n        <div className=\"home d-flex justify-content-center align-items-center flex-column\">\n            <h5 className=\"text-center pb-5\">Do you want to send an image to your landlord?</h5>\n            <Button variant=\"outline-light\" className=\"btn btn-outline-secondary d-flex p-0\">\n                <input type=\"file\" accept=\"image/*\" id=\"file\" onChange={(e): void => getImagePreview(e)} />\n            </Button>\n            <img src={file} width=\"250\" height=\"250\" alt=\"Preview of the upload\" />\n        </div>\n    );\n};\n\nexport default Home;\n","import React, { useState } from 'react';\n// import React from 'react';\n\nimport './App.css';\n// import TakePicture from './components/TakePicture/TakePicture';\nimport Home from './components/Home/Home';\n\nconst App: React.FC = () => {\n    const [isUserReady, setIsUserReady] = useState(false);\n\n    return (\n        <div className=\"main\">\n            {/* <TakePicture /> */}\n            {/* {isUserReady ? <TakePicture /> : <Home setIsUserReady={setIsUserReady} isUserReady={isUserReady} />} */}\n            <Home setIsUserReady={setIsUserReady} isUserReady={isUserReady} />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}